#include <bits/stdc++.h>

using namespace std;

using ll = long long;

const ll MOD = 1e15 + 7;

ll x[4] = {6, 3, 2, 1};

ll mulmod(ll a, ll b){
	if(b == 0) return 0;
	ll tmp = mulmod(a, b / 2);
	if(b % 2 == 0) return (tmp + tmp) % MOD;
	return (((tmp + tmp) % MOD) + a) % MOD;
}

struct Matrix{
	ll f[4][4];
	friend Matrix operator * (Matrix a, Matrix b){
		Matrix ans;
		for(int i=0; i<4; i++){
			for(int j=0; j<4; j++){
				ll tmp = 0;
				for(int k=0; k<4; k++){
					tmp += mulmod(a.f[i][k], b.f[k][j]);
					tmp %= MOD;
				}
				ans.f[i][j] = tmp;
			}
		}
		return ans;
	}
};

Matrix binpow(Matrix a, int n){
	if(n == 1) return a;
	Matrix tmp = binpow(a, n / 2);
	if(n % 2 == 0) return tmp * tmp;
	return tmp * tmp * a;
}

int main(){
	int tc; cin >> tc;
	while(tc--){
		int n; cin >> n;
		if(!n) cout << 0 << endl; 
		else if(n == 1) cout << 1 << endl; 
		else if(n == 2) cout << 3 << endl; 		
		else if(n == 3) cout << 6 << endl; 
		else{
			Matrix a;
			a.f[0][0] = a.f[0][1] = a.f[0][2] = a.f[0][3] = a.f[1][1] = a.f[1][2] = a.f[1][3] = a.f[2][1] = a.f[3][2] = 1;
			a.f[1][0] = a.f[2][0] = a.f[2][2] = a.f[2][3] = a.f[3][0] = a.f[3][1] = a.f[3][3] = 0;
			Matrix res = binpow(a, n - 3);
			ll ans = 0;
			for(int i=0; i<4; i++){
				ans += mulmod(res.f[0][i], x[i]); 
				ans %= MOD;
			}
			cout << ans << endl;
		}
	}
	return 0;
}
	
