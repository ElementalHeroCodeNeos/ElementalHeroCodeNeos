#include<bits/stdc++.h>

using namespace std;

struct edge{
	int x, y, w;
};

int n, m;
vector<edge> dscanh;
int parent[10001], sz[10001];

int Find(int u){
	if(u == parent[u]) return u;
	return parent[u] = Find(parent[u]);
}

bool Union(int u, int v){
	u = Find(u);
	v = Find(v);
	if(u == v) return false;
	if(sz[u] > sz[v]){
		sz[u] += sz[v];
		parent[v] = u;
	}
	else{
		sz[v] += sz[u];
		parent[u] = v;
	}
	return true;
}

void ktao(){
	for(int i=1; i<=n; i++){
		parent[i] = i;
		sz[i] = 1;
	}
}

bool cmp(edge a, edge b){
	return a.w < b.w;
}

void Kruskal(){
	sort(dscanh.begin(), dscanh.end(), cmp);  // Sắp xếp các cạnh theo trọng số tăng dần
	int res = 0, cnt = 0;  // res: tổng trọng số các cạnh của cây khung cực tiểu, cnt: số cạnh của cây khung  
	for(edge e : dscanh){  // Duyệt tất cả các cạnh của đồ thị
		if(cnt == n - 1) break;  // Cây khung đã có đủ (n - 1) cạnh, không cần xét nữa
		if(Union(e.x, e.y)){  // Cạnh e không tạo thành chu trình thì mới được nạp vào cây khung
			res += e.w;
			cnt++;
		}
	}
	cout << res << endl;
}

int main(){
	int tc; cin >> tc;
	while(tc--){
		cin >> n >> m;
		ktao();
		for(int i=1; i<=m; i++){
			int x, y, w; cin >> x >> y >> w;
			dscanh.push_back(edge{x, y, w});
		}
		Kruskal();
		dscanh.clear();
	}
	return 0;
}
