#include<bits/stdc++.h>

using namespace std;

struct node{
	int data;
	node *left;
	node *right;
	node(int x){
		data = x;
		left = right = NULL;
	}
};

void makeRoot(node *root, int u, int v, char c){
	if(c == 'L') root->left = new node(v);
	else root->right = new node(v);
}

void insertNode(node *root, int u, int v, char c){
	if(root == NULL) return;
	if(root->data == u){
		makeRoot(root, u, v, c);
	}
	else{
		insertNode(root->left, u, v, c);
		insertNode(root->right, u, v, c);
	}
}

bool check(node *root){
	queue<node*> q;
	q.push(root);
	int cnt = 0;
	while(!q.empty()){
		int s = q.size();
		if(s != pow(2, cnt)) return false;  // Tư tưởng: Để cây nhị phân hoàn hảo thì mọi hàng đều có số node bằng 2^i (i là mức của các node thuộc hàng đó)
		vector<node*> v;
		for(int i=0; i<s; i++){  // Duyệt vòng for(i=0; i<s; i++) này mà không dùng while(!q.empty()) để ta chỉ duyệt hết các node thuộc cùng một hàng (mức) đang xét mà không duyệt mấy node mới được push vào queue
			node *u = q.front(); q.pop();
			if(u->left != NULL) q.push(u->left);
			if(u->right != NULL) q.push(u->right);
		} 
		cnt++;
	}
	return true;
}

int main(){
	int tc; cin >> tc;
	while(tc--){
		node *root = NULL;
		int n; cin >> n;
		for(int i=1; i<=n; i++){
			int u, v; char c;
			cin >> u >> v >> c;
			if(root == NULL){
				root = new node(u);
				makeRoot(root, u, v, c);
			}
			else{
				insertNode(root, u, v, c);
			}
		}
		if(check(root)) cout << "Yes\n";
		else cout << "No\n";
	}
	return 0;
}
