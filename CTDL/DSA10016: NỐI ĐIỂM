#include<bits/stdc++.h>

using namespace std;
// Áp dụng thuật toán Kruskal
struct edge{
	int x, y;
	double w;
};

int n;
pair<double, double> a[101];
vector<edge> dscanh;
int parent[101], sz[101];

int Find(int u){
	if(u == parent[u]) return u;
	return parent[u] = Find(parent[u]);
}

bool Union(int u, int v){
	u = Find(u);
	v = Find(v);
	if(u == v) return false;
	if(sz[u] > sz[v]){
		sz[u] += sz[v];
		parent[v] = u;
	}
	else{
		sz[v] += sz[u];
		parent[u] = v;
	}
	return true;
}

void ktao(){
	for(int i=1; i<=n; i++){
		parent[i] = i;
		sz[i] = 1;
	}
}

bool cmp(edge a, edge b){
	return a.w < b.w;
}

void Kruskal(){
	sort(dscanh.begin(), dscanh.end(), cmp);
	int cnt = 0; double res = 0;
	for(edge e : dscanh){
		if(cnt == n - 1) break;
		if(Union(e.x, e.y)){
			res += e.w;
		}
	}
	cout << setprecision(6) << fixed << res << endl;
}

int main(){
	int tc; cin >> tc;
	while(tc--){
		cin >> n;
		ktao();
		for(int i=1; i<=n; i++){
			cin >> a[i].first >> a[i].second;
		}
		for(int i=1; i<=n; i++){  // Tính khoảng cách của tất cả các cặp điểm 
			for(int j=i+1; j<=n; j++){
				double dis = sqrt(pow(a[i].first - a[j].first, 2) + pow(a[i].second - a[j].second, 2));
				dscanh.push_back(edge{i, j, dis});
			}
		}
		Kruskal();
		dscanh.clear();
	}
	return 0;
}
