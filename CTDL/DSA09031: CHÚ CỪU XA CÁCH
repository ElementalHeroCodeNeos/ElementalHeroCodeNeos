#include<bits/stdc++.h> 

using namespace std;

using ll = long long;

int n, m, k, a[101][101];
set<tuple<int, int, int, int>> se;
bool visited[101][101];
vector<int> res;
int cnt;

int dx[4] = {-1, 0, 0, 1};
int dy[4] = {0, -1, 1, 0};

void DFS(int i, int j){
	visited[i][j] = true;
	if(a[i][j] == 1) cnt++;
	for(int k=0; k<4; k++){
		int i1 = i + dx[k];
		int j1 = j + dy[k];
		if(i1 >= 1 && i1 <= n && j1 >= 1 && j1 <= n && !visited[i1][j1] && !se.count({i, j, i1, j1})){
			DFS(i1, j1);
		}
	}	
}

int main(){ 
	cin >> n >> k >> m;
	for(int i=1; i<=m; i++){
		int u, v, x, y; cin >> u >> v >> x >> y;
		se.insert({u, v, x, y});
		se.insert({x, y, u, v});
	}
	for(int i=1; i<=k; i++){
		int x, y; cin >> x >> y;
		a[x][y] = 1;
	}
	for(int i=1; i<=n; i++){
		for(int j=1; j<=n; j++){
			if(a[i][j] == 1 && !visited[i][j]){
				cnt = 0;
				DFS(i, j);
				res.push_back(cnt);
			}
		}
	}
	ll ans = 0;
	for(int i=0; i<res.size(); i++){
		for(int j=i+1; j<res.size(); j++){
			ans += 1ll * res[i] * res[j];
		}
	}
	cout << ans << endl;
	return 0;
}
