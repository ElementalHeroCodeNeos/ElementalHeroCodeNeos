#include <bits/stdc++.h>

using namespace std;

int k, n, m;
char c[5][5];
string tmp;
bool used[5][5], ok = 0;
map<string, int> mp;

int dx[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
int dy[8] = {-1, 0, 1, -1, 1, -1, 0, 1};

void Try(int i, int j, string tmp){
	if(mp[tmp] > 0){	// Nếu tmp có mặt trong dic[]
		cout << tmp << " ";	// Mỗi lần tạo ra 1 từ có mặt trong dic[] là in ra, kể cả từ đó đã in rồi. VD: Nếu thay đổi ma trận đề cho thì có thể in ra: GEEKS GEEKS QUIZ QUIZ
	}
	for(int l=0; l<8; l++){
		int i1 = i + dx[l];
		int j1 = j + dy[l];
		if(i1 >= 1 && i1 <= n && j1 >= 1 && j1 <= m && !used[i1][j1]){
			used[i1][j1] = 1;
			Try(i1, j1, tmp + c[i1][j1]);
			used[i1][j1] = 0;
		}
	}
}

int main(){
	int tc; cin >> tc;
	while(tc--){
		ok = 0;
		tmp = "";
		vector<string> v;
		cin >> k >> n >> m;
		for(int i=1; i<=k; i++){
			string x; cin >> x;
			v.push_back(x);
			mp[x]++;	// Lưu lại từ x có mặt trong từ điển
		}
		sort(v.begin(), v.end());	// Sắp xếp tăng dần các chữ trong dic[]
		for(int i=1; i<=n; i++){
			for(int j=1; j<=m; j++){
				cin >> c[i][j];
			}
		}
		for(int i=1; i<=n; i++){
			for(int j=1; j<=m; j++){
				used[i][j] = 1;
				Try(i, j, tmp + c[i][j]);
				used[i][j] = 0;
			}
		}
		if(!ok) cout << "-1";
		cout << endl;
		mp.clear();
	}
	return 0;
}
