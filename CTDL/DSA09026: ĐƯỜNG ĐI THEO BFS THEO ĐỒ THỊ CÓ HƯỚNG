#include<bits/stdc++.h>

using namespace std;

int n, m, s, t; 
vector<int> ke[1001];
bool visited[1001];
int parent[1001];

void BFS(int u){
	queue<int> q;
	visited[u] = true;
	q.push(u);
	while(!q.empty()){
		int top = q.front(); q.pop();
		for(int v : ke[top]){
			if(!visited[v]){
				visited[v] = true;
				parent[v] = top;
				q.push(v);
			}
		}
	}
}

void solve(){
	BFS(s);
	if(!visited[t]){
		cout << "-1\n";
		return;
	}
	vector<int> res;
	while(t != s){
		res.push_back(t);
		t = parent[t];
	}
	res.push_back(s);
	reverse(res.begin(), res.end());
	for(int x : res){
		cout << x << " ";
	}
	cout << endl;
}

int main(){
	int tc; cin >> tc;
	while(tc--){
		cin >> n >> m >> s >> t;
		for(int i=1; i<=m; i++){
			int x, y; cin >> x >> y;
			ke[x].push_back(y);
		}
		solve();
		for(int i=1; i<=n; i++){
			ke[i].clear();
		}
		memset(visited, false, sizeof(visited));
	}
	return 0;
}
