#include<bits/stdc++.h>

using namespace std;

int n, m, s;
vector<pair<int, int>> ke[1001];

void Dijkstra(int s){
	int d[1001];  // d[i]: độ dài đường đi ngắn nhất từ đỉnh nguồn s đến đỉnh i
	for(int i=1; i<=n; i++){
		d[i] = 1e9;
	}
	d[s] = 0;
	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;  // Khai báo như này thì cặp có first nhỏ nhất sẽ lên đầu, nếu first bằng nhau thì xét second
	q.push({0, s});  // Mỗi pair<first, second> gồm: second: đỉnh u, first: độ dài đường đi ngắn nhất từ s đến u
	while(!q.empty()){
		auto top = q.top(); q.pop();
		int kc = top.first, u = top.second;
    if(kc > d[u]) continue;  // Không xét phiên bản đường đi từ s đến u này nữa (trong queue có thể có nhiều phiên bản đường đi từ s đến u, ví dụ {w1, u}, {w2, u} nên ta có thể bỏ qua những phiên bản lớn hơn d[u] đã cập nhật trước đó)
		for(auto it : ke[u]){  // Relax: Cập nhật đường đi ngắn nhất cho các đỉnh kề với u
			int v = it.first, w = it.second;
			if(d[v] > d[u] + w){  // Nếu đường đi từ s->v lớn hơn đường đi từ s->u->v thì 
				d[v] = d[u] + w;
				q.push({d[v], v});  
			}
		}
	}
	for(int i=1; i<=n; i++){
		cout << d[i] << " ";
	}
	cout << endl;
}

int main(){
	int tc; cin >> tc;
	while(tc--){
		cin >> n >> m >> s;
		for(int i=1; i<=m; i++){
			int x, y, w; cin >> x >> y >> w;
			ke[x].push_back({y, w});
			ke[y].push_back({x, w});
		}
		Dijkstra(s);
		for(int i=1; i<=n; i++){
			ke[i].clear();
		}
	}
	return 0;
}
