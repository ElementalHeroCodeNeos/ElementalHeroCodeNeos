#include<bits/stdc++.h>

using namespace std;

struct node{
	int data;
	node *left;
	node *right;
	node(int x){
		data = x;
		left = right = NULL;
	}
};

void makeRoot(node *root, int u, int v, char c){
	if(c == 'L') root->left = new node(v);
	else root->right = new node(v);
}

void insertRoot(node *root, int u, int v, char c){
	if(root == NULL) return;
	if(root->data == u){
		makeRoot(root, u, v, c);
	}
	else{
		insertRoot(root->left, u, v, c);
		insertRoot(root->right, u, v, c);
	}
}

void spiralOrder(node *root){
	stack<node*> s1, s2;
	s1.push(root);
	while(!s1.empty() || !s2.empty()){
		while(!s1.empty()){
			node *top = s1.top(); s1.pop();
			cout << top->data << " ";
			if(top->right != NULL){
				s2.push(top->right);
			}
			if(top->left != NULL){
				s2.push(top->left);
			}
		}
		while(!s2.empty()){
			node *top = s2.top(); s2.pop();
			cout << top->data << " ";
			if(top->left != NULL){
				s1.push(top->left);
			}
			if(top->right != NULL){
				s1.push(top->right);
			}
		}
	}
	cout << endl;
}

int main(){
	int tc; cin >> tc;
	while(tc--){
		int n; cin >> n;
		node *root = NULL;
		for(int i=1; i<=n; i++){
			int u, v; char c;
			cin >> u >> v >> c;
			if(root == NULL){
				root = new node(u);	
				makeRoot(root, u, v, c);
			}
			else{
				insertRoot (root, u, v, c);
			}
		}
		spiralOrder(root);
	}
	return 0;
}
